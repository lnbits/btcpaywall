<?php

/**
* Plugin Name: Btc Paywall
* Plugin URI: https://highlevelbitcoin.com/
* Description: This plugin creates a bitcoin paywall
* Version: 0.1.0
* Author: High Level BTC
* License: CC0
*/

function paywall($atts = array(), $content) {

//Filter get requests so hackers can't abuse the system

	filter_input_array(INPUT_GET, FILTER_SANITIZE_STRING);

//If there is a get request with a payment hash, check if the invoice associated with that payment hash is paid. If it is, display the content concealed by the shortcode.

	if ( isset( $_GET["pmthash"] ) ) {

		$status = checkInvoice( $_GET["pmthash"] );
		if ( $status ) {
			return $content;
		}

//If no invoice is supplied by the client, this block of code runs.

	} else {

//Get the price attribute. If necessary, convert it to an equivalent amount of bitcoin

		$amt_in_btc = $atts["price"];
		if ( get_option( 'currency' ) == "usd" ) {
		        $curl = wp_remote_get( "https://api.coinbase.com/v2/prices/BTC-USD/spot" );
			$curl = json_decode( $curl["body"] );
			$price_of_btc = $curl->data->amount;
			$amt_in_btc = $atts["price"]/$price_of_btc;
			$amt_in_btc = $amt_in_btc * 100000000;
			$amt_in_btc = round( $amt_in_btc );
		}

//Connect to lnbits and get an invoice for that amount

		ob_start();
                $payload = '{"out": false, "amount": ' . $amt_in_btc . ', "memo": "Paywall"}';
                $url = get_option( 'lnbits_url ') . '/api/v1/payments';
                $ch = curl_init();
                curl_setopt( $ch, CURLOPT_URL, $url );
                curl_setopt( $ch, CURLOPT_HTTPHEADER, array(
                        'X-Api-Key: ' . get_option( 'lnbits_api_key' ),
                        'Content-Type: application/json'
                ));
                curl_setopt( $ch, CURLOPT_POSTFIELDS, $payload );
                $head = curl_exec( $ch );
                $httpCode = curl_getinfo( $ch, CURLINFO_HTTP_CODE );
                curl_close( $ch );
                $data = ob_get_clean();
                $data = json_decode( $data, true );
                $payment_hash = $data["payment_hash"];
                $invoice = $data["payment_request"];

//The function called createQR2 uses a javascript qr library to turn a lightning invoice into a qr code

        	return '
			<script src="/wp-content/plugins/btcpaywall/qr.js"></script>
                        <script>
                                function createQR2( invoice ) {
                                        var dataUriPngImage = document.createElement( "img" ),
                                        s = QRCode.generatePNG( invoice, {
                                                ecclevel: "M",
                                                format: "html",
                                                fillcolor: "#FFFFFF",
                                                textcolor: "#373737",
                                                margin: 4,
                                                modulesize: 8
                                        } );
                                        dataUriPngImage.src = s;
                                        dataUriPngImage.id = "invoice_qr_code";
                                        dataUriPngImage.style.display = "block";
                                        dataUriPngImage.style.margin = "auto";
					return dataUriPngImage;
                                }

//Create a button which the user can click to display their invoice in a lightbox

                        </script>
                        <button id="showpaywall" style="' . get_option( 'lightbox_showpaywallcss' ) . '">' . get_option( 'lightbox_showpaywalltext' ) . '</button>
                        <script>

//Get the current time. If there is an invoice stored in localStorage that is under 10 minutes old, show the user that invoice instead of the new one that was just generated by the server.

				var invoice = "' . $invoice . '";
				var pmthash = "' . $paymenthash . '";
				var d = new Date();
				var n = d.getTime();
				n = Math.round( n/1000 );
				if ( n < localStorage.expiry ) {
					if ( localStorage.invoice ) { invoice = localStorage.invoice; }
					if ( localStorage.pmthash ) { pmthash = localStorage.pmthash; }
				}

//This script runs when the user clicks the Read more button

                                document.getElementById("showpaywall").addEventListener("click", function() {

//Check if the invoice has been paid

					checkInvoice( pmthash );

//Cover up the page with a black background and add the close button and the top text to the lightbox

                                        document.getElementById("blackBackground2").style.display = "block";
                                        document.getElementById("lightbox").innerHTML = \'<div id="lightbox_close_button" onclick="lightboxGone()"' .
					' style="' . get_option('lightbox_closecss2') . '">&times;</div>' .
					'<p id="lightbox_top_text" style="text-align: center;">' . get_option( 'lightbox_toptext2' ) .
					'</p>\';

//Turn the invoice into a qr code and display that in the lightbox

					document.getElementById("lightbox").appendChild( createQR2( invoice.toUpperCase() ) );

//Fill in the rest of the lightbox with stuff from the paywall settings

                                        document.getElementById("lightbox").innerHTML += \'<div align="center"><div id="invoiceDescriptor" style="' .
					get_option( 'lightbox_descriptorcss' ) . '">' . get_option( 'lightbox_invoicedescriptor' ) . '</div><div>' .
					'<input style="' . get_option( 'lightbox_invoicebox2' ) . '" id="invoiceBox2" value="\' + invoice + \'" />' .
					'<div id="copyButton2" style="' . get_option( 'lightbox_copycss2' ) . '">&#x1F5CD;¬ç</div></div><br><a href="lightning:\' + invoice + \'" ' .
					'target="_blank"><button type="button">' . get_option( 'lightbox_btntext2' ) . '</button></a><br><br><p>' .
					get_option( 'lightbox_bottomtext2' ) . '</p></div>\';

//Ensure that the paywall is centered on the page and make sure that if the user clicks the copy button, their invoice gets copied

                                        setLightboxPosition();
                                        document.getElementById("copyButton2").addEventListener("click", function () {
                                        	document.getElementById("invoiceBox2").select();
		                        	document.getElementById("invoiceBox2").setSelectionRange(0, 99999)
		                        	document.execCommand("copy");
		                	});
                                });
                        </script>
                	<script>

//Get the current time and add ten minutes to it. If the user does not currently have an invoice stored in localStorage or if they do but it is more than ten minutes old, store the new invoice and assume it expires in 10 minutes.

				var d = new Date();
				var n = d.getTime();
				n = Math.round( n/1000 );
				if ( !localStorage.pmthash ) {
					localStorage.pmthash = "' . $payment_hash . '";
					localStorage.invoice = "' . $invoice . '";
					n = n+600;
					localStorage.expiry = n;
				} else {
					if ( n > localStorage.expiry ) {
						localStorage.pmthash = "' . $payment_hash . '";
                                        	localStorage.invoice = "' . $invoice . '";
                                        	n = n+600;
                                        	localStorage.expiry = n;
					}
				}
			</script>
			<script>

//Check the status of the invoice every five seconds to see if it has been paid yet. This script only runs after the user clicks the Read more button.

        	                function checkInvoice() {
                	                var http = new XMLHttpRequest();
                        	        var url = "/wp-admin/admin-ajax.php?action=invoicechecker";
	                                var params = "pmthash=" + localStorage.pmthash;
	                                http.open("POST", url, true);
	                                http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
	                                http.onreadystatechange = function() {
	                                        if(http.readyState == 4 && http.status == 200) {
	                                                if (http.responseText != 1) {
	                                                        setTimeout( function() {checkInvoice();}, 5000 );
	                                                } else {
	                                                        var symbol = (window.location.href.includes("?")) ? "&":"?";
	                                                        window.location.href += symbol + "pmthash=" + localStorage.pmthash;
	                                                }
	                                        }
	                                }
	                                http.send(params);
	                        }

//Poll the server one time on pageload to find out if the user already paid their invoice (e.g. maybe they paid it yesterday)

				var http = new XMLHttpRequest();
                                var url = "/wp-admin/admin-ajax.php?action=invoicechecker";
                                var params = "pmthash=" + localStorage.pmthash;
                                http.open("POST", url, true);
                                http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                                http.onreadystatechange = function() {
                                        if(http.readyState == 4 && http.status == 200) {
                                                if (http.responseText == 1) {
                                                        var symbol = (window.location.href.includes("?")) ? "&":"?";
                                                        window.location.href += symbol + "pmthash=" + localStorage.pmthash;
                                                }
                                        }
                                }
                                http.send(params);
	                </script>
		';
        }
}

add_shortcode("paywall", "paywall");

//Connect to lnbits and find out if payment hash is paid

function checkInvoice( $pmthash ) {

//invoice is paid = 1
	ob_start();
        $url = get_option( 'lnbits_url' ) . '/api/v1/payments/' . $pmthash;
        $ch = curl_init();
        curl_setopt( $ch, CURLOPT_URL, $url );
        curl_setopt( $ch, CURLOPT_HTTPHEADER, array(
                'X-Api-Key: ' . get_option( 'lnbits_api_key' ),
                'Content-Type: application/json'
        ));
        $head = curl_exec( $ch );
        $httpCode = curl_getinfo( $ch, CURLINFO_HTTP_CODE );
        curl_close( $ch );
        $paychecker = ob_get_clean();
	if ( strpos( $paychecker, "true" ) !== false ) {
		$paychecker = 1;
	} else {
		$paychecker = 0;
	}
	return $paychecker;
}

//This script checks invoices.

function invoiceChecker() {

//Filter get requests so hackers can't abuse the system

	filter_input_array(INPUT_GET, FILTER_SANITIZE_STRING);

//If there is a post request with a payment hash, check if the invoice associated with that payment hash is paid. If it is, display the content concealed by the shortcode.

	if ( isset( $_POST["pmthash"] ) ) {
		$status = checkInvoice( $_POST["pmthash"] );
		if ( $status ) {
	        	echo 1;
			die();
		}
	}
	echo 0;
	die();
}

add_action( 'wp_ajax_invoicechecker', 'invoiceChecker' );
add_action( 'wp_ajax_nopriv_invoicechecker', 'invoiceChecker' );

//This function creates a pretty lightbox to display invoices in

function lightbox2() {

//This part customizes the lightbox using options in a settings page

        if ( !empty( get_option( 'lightbox_blackbgroundcss2' ) ) ) {
                $blackbgroundcss = 'style="' . get_option( 'lightbox_blackbgroundcss2' ) . '"';
        } else {
                $blackbgroundcss = '';
        }
        if ( !empty( get_option( 'lightbox_boxcss2' ) ) ) {
                $boxcss = 'style="' . get_option( 'lightbox_boxcss2' ) . '"';
        } else {
                $boxcss = '';
        }

//This part echoes a black backround and the lightbox itself onto the page. They start out invisible and become visible when certain events are triggered.

        echo '
        <div id="blackBackground2" ' . $blackbgroundcss . '></div>
        <div id="lightbox" ' . $boxcss . '></div>
        <script src="/wp-content/plugins/btcpaywall/qr.js"></script>
	<script src="/wp-content/plugins/btcpaywall/jquery-3.5.1.min.js"></script>
        <script>

//This script makes the lightbox and the black background disappear when you click the black background.

		function lightboxGone() {
                        document.getElementById("blackBackground2").style.display = "none";
                        document.getElementById("lightbox").style.display = "none";
                }
		document.getElementById("blackBackground2").onclick = function() {
			lightboxGone();
		}
                $( document ).ready(function() {
			document.getElementById("blackBackground2").style.height = document.body.offsetHeight + "px";
		});

                function setLightboxPosition() {
                        document.getElementById("lightbox").style.display = "block";
                        document.getElementById("lightbox").style.top = window.innerHeight/2 - document.getElementById("lightbox").offsetHeight/2 + "px";
                        document.getElementById("lightbox").style.left = window.innerWidth/2 - document.getElementById("lightbox").offsetWidth/2 + "px";
                }

        </script>
        ';
}
add_action( 'wp_footer', 'lightbox2' );

function btcPaywall_register_settings() {
	add_option( 'lnbits_url', '' );
	add_option( 'lnbits_api_key', '' );
	add_option( 'currency', 'sats' );
	add_option( 'lightbox_showpaywalltext', 'Read more' );
	add_option( 'lightbox_showpaywallcss', 'max-width: 200px;' );
	add_option( 'lightbox_boxcss2', 'background-color: white; color: black; position: fixed; padding: 20px; width: 80%; max-width: 400px; height: 100%; max-height: 590px; overflow-y: auto; border-radius: 20px; z-index: 2; display: none; z-index: 1;' );
	add_option( 'lightbox_blackbgroundcss2', 'width: 100%; position: fixed; top: 0px; left: 0px; background-color: black; z-index: 1; opacity: 0.7; display: none;' );
	add_option( 'lightbox_closecss2', 'float: right; font-size: 25px; line-height: 22px; cursor: pointer;' );
	add_option( 'lightbox_toptext2', 'Pay this invoice' );
	add_option( 'lightbox_invoicedescriptor', 'Invoice' );
	add_option( 'lightbox_descriptorcss', '' );
	add_option( 'lightbox_invoicebox2', 'height: 30px; overflow: hidden; text-overflow: ellipsis; width: 80%; max-width: 300px; white-space: nowrap; border: 1px solid black; padding: 5px; vertical-align: middle; font-size: 18px;' );
	add_option( 'lightbox_copycss2', 'display: inline-block; width: 10%; font-size: 25px;  cursor: pointer; vertical-align: middle;' );
	add_option( 'lightbox_btntext2', 'Open Wallet' );
	add_option( 'lightbox_bottomtext2', '' );
	register_setting( 'btcPaywall_options_group', 'currency', 'btcPaywall_callback' );
	register_setting( 'btcPaywall_options_group', 'lnbits_url', 'btcPaywall_callback' );
	register_setting( 'btcPaywall_options_group', 'lnbits_api_key', 'btcPaywall_callback' );
	register_setting( 'btcPaywall_options_group', 'lightbox_showpaywalltext', 'btcPaywall_callback' );
	register_setting( 'btcPaywall_options_group', 'lightbox_showpaywallcss', 'btcPaywall_callback' );
	register_setting( 'btcPaywall_options_group', 'lightbox_boxcss2', 'btcPaywall_callback' );
	register_setting( 'btcPaywall_options_group', 'lightbox_blackbgroundcss2', 'btcPaywall_callback' );
	register_setting( 'btcPaywall_options_group', 'lightbox_closecss2', 'btcPaywall_callback' );
	register_setting( 'btcPaywall_options_group', 'lightbox_toptext2', 'btcPaywall_callback' );
	register_setting( 'btcPaywall_options_group', 'lightbox_invoicedescriptor', 'btcPaywall_callback' );
	register_setting( 'btcPaywall_options_group', 'lightbox_descriptorcss', 'btcPaywall_callback' );
        register_setting( 'btcPaywall_options_group', 'lightbox_invoicebox2', 'btcPaywall_callback' );
	register_setting( 'btcPaywall_options_group', 'lightbox_copycss2', 'btcPaywall_callback' );
	register_setting( 'btcPaywall_options_group', 'lightbox_btntext2', 'btcPaywall_callback' );
	register_setting( 'btcPaywall_options_group', 'lightbox_bottomtext2', 'btcPaywall_callback' );
}
add_action( 'admin_init', 'btcPaywall_register_settings' );

function btcPaywall_register_options_page() {
	add_options_page('BTC Paywall', 'BTC Paywall', 'manage_options', 'btcPaywall', 'btcPaywall_options_page');
}
add_action('admin_menu', 'btcPaywall_register_options_page');

function btcPaywall_options_page()
{
?>
        <h2 style="text-decoration: underline;">BTC Paywall</h2>
        <form method="post" action="options.php">
                <?php settings_fields( 'btcPaywall_options_group' ); ?>
		<h3>
			LNBits Settings
		</h3>
		<table>
			<tr valign="middle">
				<th scope="row">
					<label for="lnbits url">
						LNBits url
					</label>
				</th>
				<td>
					<input type="text" id="lnbits_url" name="lnbits_url" value="<?php echo get_option('lnbits_url'); ?>" placeholder="http://localhost:5000" />
				</td>
			</tr>
		</table>
		<table>
			<tr valign="middle">
				<th scope="row">
					<label for="lnbits api key">
						LNBits api key
					</label>
				</th>
				<td>
					<input type="text" id="lnbits_api_key" name="lnbits_api_key" value="<?php echo get_option('lnbits_api_key'); ?>" placeholder="57sd8Qi6FYr1eZJMyd43tJmmmj35Lb4h" />
				</td>
			</tr>
		</table>
                <h3>
                        Customization
                </h3>
		<strong>
			Currency
		</strong>
		<br><br>
		<input type="radio" id="sats" name="currency" value="sats" checked>
		<label for="sats">Sats</label><br>
		<input type="radio" id="usd" name="currency" value="usd">
		<label for="usd">USD</label>
		<script>
			if ( "<?php echo get_option('currency'); ?>" == "usd" ) {
				document.getElementById("usd").checked = true;
			}
		</script>
		<p>
			You can use the above option to set whether your want to use sats or USD as the currency for your paywalls. If you use sats, your paywall should look like [paywall price="1500"]any wordpress content[/paywall] if you want to charge 0.00001500 btc for your content. If you use USD, your paywall shortcodes should look like [paywall price="0.01"]any wordpress content[/paywall] if you want to charge one penny for your content.
		</p>
                <table>
                        <tr valign="middle">
                                <th scope="row">
                                        <label for="lightbox_showpaywalltext">
                                                Read More button text
                                        </label>
                                </th>
                                <td>
                                        <input type="text" id="lightbox_showpaywalltext" name="lightbox_showpaywalltext" value="<?php echo get_option('lightbox_showpaywalltext'); ?>" />
                                </td>
                        </tr>
                </table>
                <p>
                        The text in the Read More button can be customized to say something other than Read More. Whatever you type here will show up instead of Read More.
                </p>
                <table>
                        <tr valign="middle">
                                <th scope="row">
                                        <label for="lightbox_showpaywallcss">
                                                Read More button css
                                        </label>
                                </th>
                                <td>
                                        <input type="text" id="lightbox_showpaywallcss" name="lightbox_showpaywallcss" value="<?php echo get_option('lightbox_showpaywallcss'); ?>" />
                                </td>
                        </tr>
                </table>
                <p>
                        The css here controls the style of the Read More button. If you wish to control the css of the button using a regular css document rather than this field, remove all text from this field and set the css for #showpaywall in a regular css document.
                </p>
                <table>
                        <tr valign="middle">
                                <th scope="row">
                                        <label for="lightbox_boxcss2">
                                                Lightbox CSS
                                        </label>
                                </th>
                                <td>
                                        <input type="text" id="lightbox_boxcss2" name="lightbox_boxcss2" value="<?php echo get_option('lightbox_boxcss2'); ?>" />
                                </td>
                        </tr>
                </table>
                <p>
                        The css in Lightbox CSS will modify the appearance of the lightbox that appears when you click the "Read more" button. You can set its background color, width, and other parameters using standard css. If you wish to control the css of the lightbox using a regular css document rather than this field, remove all text from this field and set the css for #lightbox in a regular css document.
                </p>
                <table>
                        <tr valign="middle">
                                <th scope="row">
                                        <label for="lightbox_blackbgroundcss2">
                                                Black Background CSS
                                        </label>
                                </th>
                                <td>
                                        <input type="text" id="lightbox_blackbgroundcss2" name="lightbox_blackbgroundcss2" value="<?php echo get_option('lightbox_blackbgroundcss2'); ?>" />
                                </td>
                        </tr>
                </table>
                <p>
                        The css in Black Background CSS will modify the appearance of the black background that appears behind the lightbox. You can set its color, width, and other parameters using standard css. If you wish to control the css of the black background using a regular css document rather than this field, remove all text from this field and set the css for #blackBackground in a regular css document.
                </p>
                <table>
                        <tr valign="middle">
                                <th scope="row">
                                        <label for="lightbox_closecss2">
                                                X Button CSS
                                        </label>
                                </th>
                                <td>
                                        <input type="text" id="lightbox_closecss2" name="lightbox_closecss2" value="<?php echo get_option('lightbox_closecss2'); ?>" />
                                </td>
                        </tr>
                </table>
                <p>
                        The css in X Button CSS will modify the x button which, by default, appears at the top right of the lightbox.
                </p>
                <table>
                        <tr valign="middle">
                                <th scope="row">
                                        <label for="lightbox_toptext2">
                                                Top text
                                        </label>
                                </th>
                                <td>
                                        <input type="text" id="lightbox_toptext2" name="lightbox_toptext2" value="<?php echo get_option('lightbox_toptext2'); ?>" />
                                </td>
                        </tr>
                </table>
                <p>
                        The text in "Top text" will appear at the top of the lightbox.
                </p>
                <table>
                        <tr valign="middle">
                                <th scope="row">
                                        <label for="lightbox_invoicedescriptor">
                                                Invoice Descriptor
                                        </label>
                                </th>
                                <td>
                                        <input type="text" id="lightbox_invoicedescriptor" name="lightbox_invoicedescriptor" value="<?php echo get_option('lightbox_invoicedescriptor'); ?>" />
                                </td>
                        </tr>
                </table>
                <p>
                        The text in "Invoice descriptor" appears below the qr code.
                </p>
                <table>
                        <tr valign="middle">
                                <th scope="row">
                                        <label for="lightbox_descriptorcss">
                                                Descriptor css
                                        </label>
                                </th>
                                <td>
                                        <input type="text" id="lightbox_descriptorcss" name="lightbox_descriptorcss" value="<?php echo get_option('lightbox_descriptorcss'); ?>" />
                                </td>
                        </tr>
                </table>
                <p>
                        The css in "Descriptor css" controls the style of the invoice descriptor. If you wish to control the css using a regular css document rather than this field, remove all text from this field and set the css for #invoiceDescriptor in a regular css document.
                </p>
                <table>
                        <tr valign="middle">
                                <th scope="row">
                                        <label for="lightbox_invoicebox2">
                                                Invoice box
                                        </label>
                                </th>
                                <td>
                                        <input type="text" id="lightbox_invoicebox2" name="lightbox_invoicebox2" value="<?php echo get_option('lightbox_invoicebox2'); ?>" />
                                </td>
                        </tr>
                </table>
                <p>
                        The css in "Invoice box" controls the style of the box that the invoice's text appears in. If you wish to control the css using a regular css document rather than this field, remove all text from this field and set the css for #invoiceBox2 in a regular css document.
                </p>
                <table>
                        <tr valign="middle">
                                <th scope="row">
                                        <label for="lightbox_copycss2">
                                                Copy button css
                                        </label>
                                </th>
                                <td>
                                        <input type="text" id="lightbox_copycss2" name="lightbox_copycss2" value="<?php echo get_option('lightbox_copycss2'); ?>" />
                                </td>
                        </tr>
                </table>
                <p>
                        The css in "Copy button css" controls the style of the copy button next to the lightbox. If you wish to control the css using a regular css document rather than this field, remove all text from this field and set the css for #copyButton2 in a regular css document.
                </p>
                <table>
                        <tr valign="middle">
                                <th scope="row">
                                        <label for="lightbox_btntext2">
                                                Button text
                                        </label>
                                </th>
                                <td>
                                        <input type="text" id="lightbox_btntext2" name="lightbox_btntext2" value="<?php echo get_option('lightbox_btntext2'); ?>" />
                                </td>
                        </tr>
                </table>
                <p>
                        The text in "Button text" will appear in the button in the lightbox.
                </p>
                <table>
                        <tr valign="middle">
                                <th scope="row">
                                        <label for="lightbox_bottomtext2">
                                                Bottom text
                                        </label>
                                </th>
                                <td>
                                        <input type="text" id="lightbox_bottomtext2" name="lightbox_bottomtext2" value='<?php echo get_option('lightbox_bottomtext2'); ?>' />
                                </td>
                        </tr>
                </table>
                <p>
                        The text in "Bottom text" will appear at the bottom of the lightbox after the button.
                </p>
                <?php  submit_button(); ?>
        </form>
<?php
} ?>
